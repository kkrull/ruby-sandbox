From: <Saved by Blink>
Snapshot-Content-Location: https://midimusic.github.io/tech/midispec.html
Subject: Standard MIDI file format, updated
Date: Tue, 1 Aug 2023 15:48:30 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--nyPOM5N2JdnvC1PrLcdAOLzSMdKQi7m1X3Kes8yApH----"


------MultipartBoundary--nyPOM5N2JdnvC1PrLcdAOLzSMdKQi7m1X3Kes8yApH----
Content-Type: text/html
Content-ID: <frame-8910C2B3DE17A01CC8BEF9D868B6E942@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://midimusic.github.io/tech/midispec.html

<!DOCTYPE html><html lang=3D"en"><head><meta http-equiv=3D"Content-Type" co=
ntent=3D"text/html; charset=3DUTF-8">

<meta name=3D"description" content=3D"MIDI File Format Spec. 1.1+">
<meta name=3D"keywords" content=3D"MIDI, file, format, specification, updat=
ed">
<title>Standard MIDI file format, updated</title>
<link rel=3D"shortcut icon" href=3D"https://midimusic.github.io/favicon.ico=
">
<link rel=3D"stylesheet" type=3D"text/css" href=3D"https://midimusic.github=
.io/style.css">
</head>
<body>
<header>
<h2>MIDIMUSIC<span> Computer Processed Music</span></h2>
</header>
<nav>
<ul>
<li><a href=3D"https://midimusic.github.io/index.html">Index</a></li>
<li><a href=3D"https://midimusic.github.io/joplin/index.html">Scott Joplin =
Music</a></li>
<li><a href=3D"https://midimusic.github.io/wurlitzer/index.html">Wurlitzer =
Music</a></li>
<li><a href=3D"https://midimusic.github.io/tech/index.html">Technical</a></=
li>
<li><a href=3D"https://midimusic.github.io/literature/index.html">Literatur=
e</a></li>
<li><a href=3D"https://midimusic.github.io/estey/index.html">Estey Organ Mu=
sic</a></li>
<li><a href=3D"https://midimusic.github.io/about/index.html">About MidiMusi=
c</a></li>
</ul>
</nav>
<article>
<ol class=3D"crumb">
<li><a href=3D"https://midimusic.github.io/index.html">Index</a></li>
<li><a href=3D"https://midimusic.github.io/tech/index.html">Technical</a></=
li>
<li>Midi File Specification</li>	=09
</ol>
<h1>Standard MIDI-File Format Spec. 1.1, updated</h1>
<h2>Abstract.</h2>
A detailed Specification of the Standard MIDI file format
<h1>Table of Contents</h1>
<p>
</p><ul>
<li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM0_">0 - Int=
roduction</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM1_">1 =
- Sequences, Tracks, Chunks: File Block Structure</a>
<ul>
<li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM1_1">1.1 - =
Variable Length Quantity</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM1_2">1=
.2 - Files</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM1_3">1=
.3 - Chunks</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM1_4">1=
.4 - Chunk Types</a>
</li></ul>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM2_">2 =
- Chunk Descriptions</a>
<ul>
<li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM2_1">2.1 - =
Header Chunks</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM2_2">2=
.2 - MIDI File Formats 0,1 and 2</a>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM2_3">2=
.3 - Track Chunks</a>
</li></ul>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM3_">3 =
- Meta-Events</a>
<ul>
<li><a href=3D"https://midimusic.github.io/tech/midispec.html#BM3_1">3.1 - =
Meta Event Definitions</a>
</li></ul>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_">A=
ppendix 1</a> - MIDI Messages
<ul>
<li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_1">Appen=
dix 1.1</a> - Table of Major MIDI Messages
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_2">=
Appendix 1.2</a> - Table of MIDI Controller Messages (Data Bytes)
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_3">=
Appendix 1.3</a> - Table of MIDI Note Numbers
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_4">=
Appendix 1.4</a> - General MIDI Instrument Patch Map
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_5">=
Appendix 1.5</a> - General MIDI Percussion Key Map
</li></ul>
</li><li><a href=3D"https://midimusic.github.io/tech/midispec.html#BMA2_">A=
ppendix 2</a> - Program Fragments and Example MIDI Files
</li></ul>
<h3>Acknowledgement:</h3>
This document was originally distributed in text format by The Internationa=
l
MIDI Association. I have updated it and added new Appendices.<br>
=C2=A9 Copyright 1999 David Back.<br>
Web: <a href=3D"http://midimusic.github.io/">http://midimusic.github.io</a>=
<br>
This document may be freely copied in whole or in part provided the copy co=
ntains this
Acknowledgement.
<p>
</p><h3><a id=3D"BM0_">0 - Introduction</a></h3>
<p>This document details the structure of MIDI Files. The
purpose of MIDI Files is to provide a way of interchanging
time-stamped MIDI data between different programs on the same or
different computers. One of the primary design goals is compact
representation, which makes it very appropriate for disk-based
file format, but which might make it inappropriate for storing in
memory for quick access by a sequencer program.

</p><p>MIDI Files contain one or more MIDI streams, with time
information for each event. Song, sequence, and track structures,
tempo and time signature information, are all supported. Track
names and other descriptive information may be stored with the
MIDI data. This format supports multiple tracks and multiple
sequences so that if the user of a program which supports
multiple tracks intends to move a file to another one, this
format can allow that to happen.

</p><p>The specification defines the 8-bit binary data stream used in the
file. The data can be stored in a binary file, nibbilized,
7-bit-ized for efficient MIDI transmission, converted to Hex
ASCII, or translated symbolically to a printable text file. This
spec addresses what's in the 8-bit stream. It does not address
how a MIDI File will be transmitted over MIDI.

</p><h3><a id=3D"BM1_">1 - Sequences, Tracks, Chunks: File Block Structure<=
/a></h3>

<p>In this document, bit 0 means the least significant bit of a
byte, and bit 7 is the most significant.

</p><h3><a id=3D"BM1_1">1.1 - Variable Length Quantity</a></h3>
<p>Some numbers in MIDI Files are represented in a form called
VARIABLE-LENGTH QUANTITY. These numbers are represented 7 bits
per byte, most significant bits first. All bytes except the last
have bit 7 set, and the last byte has bit 7 clear. If the number
is between 0 and 127, it is thus represented exactly as one byte.

</p><p><b>Some examples of numbers represented as variable-length quantitie=
s:</b>
</p><p>
</p><table class=3D"joplin">
<tbody><tr><td>00000000 </td><td>00</td></tr>
<tr><td>00000040 </td><td>40</td></tr>
<tr><td>0000007F </td><td>7F</td></tr>
<tr><td>00000080 </td><td>81 00</td></tr>
<tr><td>00002000 </td><td>C0 00</td></tr>
<tr><td>00003FFF </td><td>FF 7F</td></tr>
<tr><td>00004000 </td><td>81 80 00</td></tr>
<tr><td>00100000 </td><td>C0 80 00</td></tr>
<tr><td>001FFFFF </td><td>FF FF 7F</td></tr>
<tr><td>00200000 </td><td>81 80 80 00</td></tr>
<tr><td>08000000 </td><td>C0 80 80 00</td></tr>
<tr><td>0FFFFFFF </td><td>FF FF FF 7F</td></tr>
</tbody></table>
<p>The largest number which is allowed is 0FFFFFFF so that the
variable-length representations must fit in 32 bits in a routine
to write variable-length numbers. Theoretically, larger numbers
are possible, but 2 x 10<sup>8</sup> 96ths of a beat at a fast tempo of 500
beats per minute is four days, long enough for any delta-time!

</p><h3><a id=3D"BM1_2">1.2 - Files</a></h3>
To any file system, a MIDI File is simply a series of
8-bit bytes. On the Macintosh, this byte stream is stored in the
data fork of a file (with file type 'MIDI'), or on the Clipboard
(with data type 'MIDI'). Most other computers store 8-bit byte
streams in files.

<h3><a id=3D"BM1_3">1.3 - Chunks</a></h3>
MIDI Files are made up of -chunks-. Each chunk has a
4-character type and a 32-bit length, which is the number of
bytes in the chunk. This structure allows future chunk types to
be designed which may be easily be ignored if encountered by a
program written before the chunk type is introduced. Your
programs should EXPECT alien chunks and treat them as if they
weren't there.

<p>Each chunk begins with a 4-character ASCII type. It is
followed by a 32-bit length, most significant byte first (a
length of 6 is stored as 00 00 00 06). This length refers to the
number of bytes of data which follow: the eight bytes of type and
length are not included. Therefore, a chunk with a length of 6
would actually occupy 14 bytes in the disk file.

</p><p>This chunk architecture is similar to that used by Electronic
Arts' IFF format, and the chunks described herein could easily be
placed in an IFF file. The MIDI File itself is not an IFF file:
it contains no nested chunks, and chunks are not constrained to
be an even number of bytes long. Converting it to an IFF file is
as easy as padding odd length chunks, and sticking the whole
thing inside a FORM chunk.

</p><h3><a id=3D"BM1_4">1.4 - Chunk Types</a></h3>
<p>MIDI Files contain two types of chunks: header chunks and
track chunks. A -header- chunk provides a minimal amount of
information pertaining to the entire MIDI file. A -track- chunk
contains a sequential stream of MIDI data which may contain
information for up to 16 MIDI channels. The concepts of multiple
tracks, multiple MIDI outputs, patterns, sequences, and songs may
all be implemented using several track chunks.

</p><p>A MIDI File always starts with a header chunk, and is followed
by one or more track chunks.

</p><p>MThd &lt;length of header data&gt;<br>
 &lt;header data&gt;<br>
 MTrk &lt;length of track data&gt;<br>
 &lt;track data&gt;<br>
 MTrk &lt;length of track data&gt;<br>
 &lt;track data&gt;<br>
 . . .

</p><h3><a id=3D"BM2_">2 - Chunk Descriptions</a></h3>

<h3><a id=3D"BM2_1">2.1 - Header Chunks</a></h3>
The header chunk at the beginning of the file
specifies some basic information about the data in the file.
Here's the syntax of the complete chunk:

<p>&lt;Header Chunk&gt; =3D &lt;chunk
type&gt;&lt;length&gt;&lt;format&gt;&lt;ntrks&gt;&lt;division&gt;

</p><p>As described above, &lt;chunk type&gt; is the four ASCII
characters 'MThd'; &lt;length&gt; is a 32-bit representation of
the number 6 (high byte first).

</p><p>The data section contains three 16-bit words, stored
most-significant byte first.

</p><p>The first word, &lt;format&gt;, specifies the overall
organisation of the file. Only three values of &lt;format&gt; are
specified:

</p><p>0-the file contains a single multi-channel track<br>
1-the file contains one or more simultaneous tracks (or MIDI outputs) of a =
sequence<br>
2-the file contains one or more sequentially independent single-track patte=
rns

</p><p>More information about these formats is provided below.

</p><p>The next word, &lt;ntrks&gt;, is the number of track chunks in
the file. It will always be 1 for a format 0 file.

</p><p>The third word, &lt;division&gt;, specifies the meaning of the
delta-times. It has two formats, one for metrical time, and one
for time-code-based time:
</p><table class=3D"joplin">
<tbody><tr><th>bit 15 </th><th>bits 14 thru 8</th><th>bits 7 thru 0</th></t=
r>
<tr><td>0 </td><td colspan=3D"2">ticks per quarter-note</td></tr>
<tr><td>1 </td><td>negative SMPTE format </td><td>ticks per frame</td></tr>
</tbody></table>
<p>If bit 15 of &lt;division&gt; is zero, the bits 14 thru 0
represent the number of delta time "ticks" which make
up a quarter-note. For instance, if division is 96, then a time
interval of an eighth-note between two events in the file would
be 48.

</p><p>If bit 15 of &lt;division&gt; is a one, delta times in a file
correspond to subdivisions of a second, in a way consistent with
SMPTE and MIDI Time Code. Bits 14 thru 8 contain one of the four
values -24, -25, -29, or -30, corresponding to the four standard
SMPTE and MIDI Time Code formats (-29 corresponds to 30 drop
frame), and represents the number of frames per second. These
negative numbers are stored in two's compliment form. The second
byte (stored positive) is the resolution within a frame: typical
values may be 4 (MIDI Time Code resolution), 8, 10, 80 (bit
resolution), or 100. This stream allows exact specifications of
time-code-based tracks, but also allows millisecond-based tracks
by specifying 25 frames/sec and a resolution of 40 units per
frame. If the events in a file are stored with a bit resolution
of thirty-frame time code, the division word would be E250 hex.

</p><h3><a id=3D"BM2_2">2.2 - MIDI File Formats 0,1 and 2</a></h3>
A Format 0 file has a header chunk
followed by one track chunk. It is the most interchangeable
representation of data. It is very useful for a simple
single-track player in a program which needs to make synthesisers
make sounds, but which is primarily concerned with something
else such as mixers or sound effect boxes. It is very desirable
to be able to produce such a format, even if your program is
track-based, in order to work with these simple programs.

<p>A Format 1 or 2 file has a header chunk followed by one or
more track chunks. programs which support several simultaneous
tracks should be able to save and read data in format 1, a
vertically one dimensional form, that is, as a collection of
tracks. Programs which support several independent patterns
should be able to save and read data in format 2, a horizontally
one dimensional form. Providing these minimum capabilities will
ensure maximum interchangeability.

</p><p>In a MIDI system with a computer and a SMPTE synchroniser
which uses Song Pointer and Timing Clock, tempo maps (which
describe the tempo throughout the track, and may also include
time signature information, so that the bar number may be
derived) are generally created on the computer. To use them with
the synchroniser, it is necessary to transfer them from the
computer. To make it easy for the synchroniser to extract this
data from a MIDI File, tempo information should always be stored
in the first MTrk chunk. For a format 0 file, the tempo will be
scattered through the track and the tempo map reader should
ignore the intervening events; for a format 1 file, the tempo map
must be stored as the first track. It is polite to a tempo map
reader to offer your user the ability to make a format 0 file
with just the tempo, unless you can use format 1.

</p><p>All MIDI Files should specify tempo and time signature. If
they don't, the time signature is assumed to be 4/4, and the
tempo 120 beats per minute. In format 0, these meta-events should
occur at least at the beginning of the single multi-channel
track. In format 1, these meta-events should be contained in the
first track. In format 2, each of the temporally independent
patterns should contain at least initial time signature and tempo
information.

</p><p>Format IDs to support other structures may be defined in
the future. A program encountering an unknown format ID may still
read other MTrk chunks it finds from the file, as format 1 or 2,
if its user can make sense of them and arrange them into some
other structure if appropriate. Also, more parameters may be
added to the MThd chunk in the future: it is important to read
and honour the length, even if it is longer than 6.

</p><h3><a id=3D"BM2_3">2.3 - Track Chunks</a></h3>
The track chunks (type MTrk) are where actual
song data is stored. Each track chunk is simply a stream of MIDI
events (and non-MIDI events), preceded by delta-time values. The
format for Track Chunks (described below) is exactly the same for
all three formats (0, 1, and 2: see "Header Chunk"
above) of MIDI Files.

<p>Here is the syntax of an MTrk chunk (the + means "one or
more": at least one MTrk event must be present):

</p><p>&lt;Track Chunk&gt; =3D &lt;chunk type&gt;&lt;length&gt;&lt;MTrk
event&gt;+

</p><p>The syntax of an MTrk event is very simple:

</p><p>&lt;MTrk event&gt; =3D &lt;delta-time&gt;&lt;event&gt;

</p><p>&lt;delta-time&gt; is stored as a variable-length quantity. It
represents the amount of time before the following event. If the
first event in a track occurs at the very beginning of a track,
or if two events occur simultaneously, a delta-time of zero is
used. Delta-times are always present. (Not storing delta-times of
0 requires at least two bytes for any other value, and most
delta-times aren't zero.) Delta-time is in some fraction of a
beat (or a second, for recording a track with SMPTE times), as
specified in the header chunk.

</p><p>&lt;event&gt; =3D &lt;MIDI event&gt; | &lt;sysex event&gt; |
&lt;meta-event&gt;

</p><p>&lt;MIDI event&gt; is any MIDI channel message
 <a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_">See Appen=
dix 1 - MIDI Messages.</a> Running status
is used: status bytes of MIDI channel messages may be omitted if
the preceding event is a MIDI channel message with the same
status. The first event in each MTrk chunk must specify status.
Delta-time is not considered an event itself: it is an integral
part of the syntax for an MTrk event. Notice that running status
occurs across delta-times.

</p><p>&lt;sysex event&gt; is used to specify a MIDI system exclusive
message, either as one unit or in packets, or as an
"escape" to specify any arbitrary bytes to be
transmitted. <a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1=
_">See Appendix 1 - MIDI Messages.</a> A normal
complete system exclusive message is stored in a MIDI File in this way:

</p><p>F0 &lt;length&gt; &lt;bytes to be transmitted after F0&gt;

</p><p>The length is stored as a variable-length quantity. It
specifies the number of bytes which follow it, not including the
F0 or the length itself. For instance, the transmitted message F0
43 12 00 07 F7 would be stored in a MIDI File as F0 05 43 12 00
07 F7. It is required to include the F7 at the end so that the
reader of the MIDI File knows that it has read the entire
message.

</p><p>Another form of sysex event is provided which does not imply
that an F0 should be transmitted. This may be used as an
"escape" to provide for the transmission of things
which would not otherwise be legal, including system realtime
messages, song pointer or select, MIDI Time Code, etc. This uses
the F7 code:

</p><p>F7 &lt;length&gt; &lt;all bytes to be transmitted&gt;

</p><p>Unfortunately, some synthesiser manufacturers specify that
their system exclusive messages are to be transmitted as little
packets. Each packet is only part of an entire syntactical system
exclusive message, but the times they are transmitted are
important. Examples of this are the bytes sent in a CZ patch
dump, or the FB-01's "system exclusive mode" in which
microtonal data can be transmitted. The F0 and F7 sysex events
may be used together to break up syntactically complete system
exclusive messages into timed packets.

</p><p>An F0 sysex event is used for the first packet in a series --
it is a message in which the F0 should be transmitted. An F7
sysex event is used for the remainder of the packets, which do
not begin with F0. (Of course, the F7 is not considered part of
the system exclusive message).

</p><p>A syntactic system exclusive message must always end with an
F7, even if the real-life device didn't send one, so that you
know when you've reached the end of an entire sysex message
without looking ahead to the next event in the MIDI File. If it's
stored in one complete F0 sysex event, the last byte must be an
F7. There also must not be any transmittable MIDI events in
between the packets of a multi-packet system exclusive message.
This principle is illustrated in the paragraph below.

</p><p>Here is a MIDI File of a multi-packet system exclusive
message: suppose the bytes F0 43 12 00 were to be sent, followed
by a 200-tick delay, followed by the bytes 43 12 00 43 12 00,
followed by a 100-tick delay, followed by the bytes 43 12 00 F7,
this would be in the MIDI File:
</p><table class=3D"joplin">
<tbody><tr><td>F0 03 43 12 00</td><td>&nbsp;</td></tr>
<tr><td>81 48 </td><td>200-tick delta time</td></tr>
<tr><td>F7 06 43 12 00 43 12 00</td><td>&nbsp;</td></tr>
<tr><td>64 </td><td>100-tick delta time</td></tr>
<tr><td>F7 04 43 12 00 F7</td><td>&nbsp;</td></tr>
</tbody></table>
<p>When reading a MIDI File, and an F7 sysex event is encountered
without a preceding F0 sysex event to start a multi-packet system
exclusive message sequence, it should be presumed that the F7
event is being used as an "escape". In this case, it is
not necessary that it end with an F7, unless it is desired that
the F7 be transmitted.

</p><p>&lt;meta-event&gt; specifies non-MIDI information useful to
this format or to sequencers, with this syntax:

</p><p>FF &lt;type&gt; &lt;length&gt; &lt;bytes&gt;

</p><p>All meta-events begin with FF, then have an event type byte
(which is always less than 128), and then have the length of the
data stored as a variable-length quantity, and then the data
itself. If there is no data, the length is 0. As with chunks,
future meta-events may be designed which may not be known to
existing programs, so programs must properly ignore meta-events
which they do not recognise, and indeed should expect to see
them. Programs must never ignore the length of a meta-event which
they do not recognise, and they shouldn't be surprised if it's
bigger than expected. If so, they must ignore everything past
what they know about. However, they must not add anything of
their own to the end of the meta- event. Sysex events and meta
events cancel any running status which was in effect. Running
status does not apply to and may not be used for these messages.

</p><h3><a id=3D"BM3_">3 - Meta-Events</a></h3>

<p>A few meta-events are defined herein. It is not required for
every program to support every meta-event.

</p><p>In the syntax descriptions for each of the meta-events a set
of conventions is used to describe parameters of the events. The
FF which begins each event, the type of each event, and the
lengths of events which do not have a variable amount of data are
given directly in hexadecimal. A notation such as dd or se, which
consists of two lower-case letters, mnemonically represents an
8-bit value. Four identical lower-case letters such as wwww
mnemonically refer to a 16-bit value, stored
most-significant-byte first. Six identical lower-case letters
such as tttttt refer to a 24-bit value, stored
most-significant-byte first. The notation len refers to the length
portion of the meta-event syntax, that is, a number, stored as a
variable- length quantity, which specifies how many bytes
(possibly text) data were just specified by the length.

</p><p>In general, meta-events in a track which occur at the same
time may occur in any order. If a copyright event is used, it
should be placed as early as possible in the file, so it will be
noticed easily. Sequence Number and Sequence/Track Name events,
if present, must appear at time 0. An end-of- track event must
occur as the last event in the track.

</p><h3><a id=3D"BM3_1">3.1 - Meta-Event Definitions</a></h3>
<p><b>FF 00 02 Sequence Number</b><br>
This optional event, which must occur
at the beginning of a track, before any nonzero delta-times, and
before any transmittable MIDI events, specifies the number of a
sequence. In a format 2 MIDI File, it is used to identify each
"pattern" so that a "song" sequence using the
Cue message can refer to the patterns. If the ID numbers are
omitted, the sequences' locations in order in the file are used
as defaults. In a format 0 or 1 MIDI File, which only contain one
sequence, this number should be contained in the first (or only)
track. If transfer of several multitrack sequences is required,
this must be done as a group of format 1 files, each with a
different sequence number.

</p><p><b>FF 01 len text Text Event</b><br>
Any amount of text describing
anything. It is a good idea to put a text event right at the
beginning of a track, with the name of the track, a description
of its intended orchestration, and any other information which
the user wants to put there. Text events may also occur at other
times in a track, to be used as lyrics, or descriptions of cue
points. The text in this event should be printable ASCII
characters for maximum interchange. However, other character
codes using the high-order bit may be used for interchange of
files between different programs on the same computer which
supports an extended character set. Programs on a computer which
does not support non-ASCII characters should ignore those
characters.

</p><p>Meta-event types 01 through 0F are reserved for various types
of text events, each of which meets the specification of text
events (above) but is used for a different purpose:

</p><p><b>FF 02 len text Copyright Notice</b><br>
Contains a copyright notice as
printable ASCII text. The notice should contain the characters
(C), the year of the copyright, and the owner of the copyright.
If several pieces of music are in the same MIDI File, all of the
copyright notices should be placed together in this event so that
it will be at the beginning of the file. This event should be the
first event in the track chunk, at time 0.

</p><p><b>FF 03 len text Sequence/Track Name</b><br>
If in a format 0 track, or
the first track in a format 1 file, the name of the sequence.
Otherwise, the name of the track.

</p><p><b>FF 04 len text Instrument Name</b><br>
A description of the type of
instrumentation to be used in that track. May be used with the
MIDI Prefix meta-event to specify which MIDI channel the
description applies to, or the channel may be specified as text
in the event itself.

</p><p><b>FF 05 len text Lyric</b><br>
A lyric to be sung. Generally, each
syllable will be a separate lyric event which begins at the
event's time.

</p><p><b>FF 06 len text Marker</b><br>
Normally in a format 0 track, or the
first track in a format 1 file. The name of that point in the
sequence, such as a rehearsal letter or section name ("First
Verse", etc.)

</p><p><b>FF 07 len text Cue Point</b><br>
A description of something happening
on a film or video screen or stage at that point in the musical
score ("Car crashes into house", "curtain
opens", "she slaps his face", etc.)

</p><p><b>FF 20 01 cc MIDI Channel Prefix</b><br>
The MIDI channel (0-15)
contained in this event may be used to associate a MIDI channel
with all events which follow, including System exclusive and
meta-events. This channel is "effective" until the next
normal MIDI event (which contains a channel) or the next MIDI
Channel Prefix meta-event. If MIDI channels refer to
"tracks", this message may be put into a format 0 file,
keeping their non-MIDI data associated with a track. This
capability is also present in Yamaha's ESEQ file format.

</p><p><b>FF 2F 00 End of Track</b><br>
This event is not optional. It is
included so that an exact ending point may be specified for the
track, so that an exact length is defined, which is necessary for tracks
which are looped or concatenated.

</p><p><b>FF 51 03 tttttt Set Tempo (in microseconds per MIDI quarter-note)=
</b><br>
This event indicates a tempo change. Another way of
putting "microseconds per quarter-note" is "24ths
of a microsecond per MIDI clock". Representing tempos as
time per beat instead of beat per time allows absolutely exact
long-term synchronisation with a time-based sync protocol such as
SMPTE time code or MIDI time code. The amount of accuracy
provided by this tempo resolution allows a four-minute piece at
120 beats per minute to be accurate within 500 usec at the end of
the piece. Ideally, these events should only occur where MIDI
clocks would be located -- this convention is intended to
guarantee, or at least increase the likelihood, of compatibility
with other synchronisation devices so that a time signature/tempo
map stored in this format may easily be transferred to another
device.

</p><p><b>FF 54 05 hr mn se fr ff SMPTE Offset</b><br>
This event, if present,
designates the SMPTE time at which the track chunk is supposed to
start. It should be present at the beginning of the track, that
is, before any nonzero delta-times, and before any transmittable
MIDI events. the hour must be encoded with the SMPTE format, just
as it is in MIDI Time Code. In a format 1 file, the SMPTE Offset
must be stored with the tempo map, and has no meaning in any of
the other tracks. The ff field contains fractional frames, in
100ths of a frame, even in SMPTE-based tracks which specify a
different frame subdivision for delta-times.

</p><p><b>FF 58 04 nn dd cc bb Time Signature</b><br>
The time signature is
expressed as four numbers. nn and dd represent the numerator and
denominator of the time signature as it would be notated. The
denominator is a negative power of two: 2 represents a
quarter-note, 3 represents an eighth-note, etc. The cc parameter
expresses the number of MIDI clocks in a metronome click. The bb
parameter expresses the number of notated 32nd-notes in a MIDI
quarter-note (24 MIDI clocks). This was added because there are
already multiple programs which allow a user to specify that what
MIDI thinks of as a quarter-note (24 clocks) is to be notated as,
or related to in terms of, something else.

</p><p>Therefore, the complete event for 6/8 time, where the
metronome clicks every three eighth-notes, but there are 24
clocks per quarter-note, 72 to the bar, would be (in hex):

</p><p>FF 58 04 06 03 24 08

</p><p>That is, 6/8 time (8 is 2 to the 3rd power, so this is 06 03),
36 MIDI clocks per dotted-quarter (24 hex!), and eight notated
32nd-notes per quarter-note.

</p><p><b>FF 59 02 sf mi Key Signature</b><br>
sf =3D -7: 7 flats<br>
sf =3D -1: 1 flat<br>
sf =3D 0: key of C<br>
sf =3D 1: 1 sharp<br>
sf =3D 7: 7 sharps<br>
</p><p>
mi =3D 0: major key<br>
mi =3D 1: minor key<br>

</p><p><b>FF 7F len data Sequencer Specific Meta-Event</b><br>
Special requirements for particular sequencers may use this event type:
the first byte or bytes of data is a manufacturer ID (these are
one byte, or if the first byte is 00, three bytes). As with MIDI
System Exclusive, manufacturers who define something using this
meta-event should publish it so that others may be used by a
sequencer which elects to use this as its only file format;
sequencers with their established feature-specific formats should
probably stick to the standard features when using this format.
</p><p>
<a href=3D"https://midimusic.github.io/tech/midispec.html#BMA2_">See Append=
ix 2 - Program Fragments and Example MIDI Files</a> for an
example midi file.
</p><hr>
<h2><a id=3D"BMA1_">Appendix 1 - MIDI Messages</a></h2>
<p>
A MIDI message is made up of an eight-bit status byte which is generally fo=
llowed
by one or two data bytes. There are a number of different types of MIDI mes=
sages.
At the highest level, MIDI messages are classified as being either Channel =
Messages
or System Messages. Channel messages are those which apply to a specific Ch=
annel, and
the Channel number is included in the status byte for these messages. Syste=
m messages
are not Channel specific, and no Channel number is indicated in their statu=
s bytes.=20
</p><p>
Channel Messages may be further classified as being either Channel Voice Me=
ssages,
or Mode Messages. Channel Voice Messages carry musical performance data, an=
d these
messages comprise most of the traffic in a typical MIDI data stream. Channe=
l Mode
messages affect the way a receiving instrument will respond to the Channel =
Voice
messages.
</p><p>
MIDI System Messages are classified as being System Common Messages, System=
 Real Time
Messages, or System Exclusive Messages. System Common messages are intended=
 for all
receivers in the system. System Real Time messages are used for synchronisa=
tion between
clock-based MIDI components. System Exclusive messages include a Manufactur=
er's
Identification (ID) code, and are used to transfer any number of data bytes=
 in a format
specified by the referenced manufacturer.
</p><p>
</p><h3><a id=3D"BMA1_1">Appendix 1.1 - Table of Major MIDI Messages</a></h=
3>
<p>
</p><table class=3D"joplin">
<tbody><tr><th colspan=3D"3">Channel Voice Messages</th></tr>
<tr><th>Status<br>D7----D0<br>nnnn is the MIDI channel no.</th><th>Data Byt=
e(s)<br>D7----D0</th><th>Description</th></tr>
<tr><td>1000nnnn</td><td>0kkkkkkk<br>0vvvvvvv</td><td>Note Off event.<br>
This message is sent when a note is released (ended).<br>
(kkkkkkk) is the key (note) number.<br>
(vvvvvvv) is the velocity.</td></tr>
<tr><td>1001nnnn</td><td>0kkkkkkk<br>0vvvvvvv</td><td>Note On event.<br>
This message is sent when a note is depressed (start).<br>
(kkkkkkk) is the key (note) number.<br>
(vvvvvvv) is the velocity.</td></tr>
<tr><td>1010nnnn</td><td>0kkkkkkk<br>0vvvvvvv</td><td>Polyphonic Key Pressu=
re (Aftertouch).<br>
This message is most often sent by pressing down on the key after it "botto=
ms out".<br>
(kkkkkkk) is the key (note) number.<br>
(vvvvvvv) is the pressure value.</td></tr>
<tr><td>1011nnnn</td><td>0ccccccc<br>0vvvvvvv</td><td>Control Change.<br>
This message is sent when a controller value changes.  Controllers include =
devices
such as pedals and levers. Certain controller numbers are reserved
for specific purposes. See Channel Mode Messages.<br>
(ccccccc) is the controller number.<br>
(vvvvvvv) is the new value.</td></tr>
<tr><td>1100nnnn</td><td>0ppppppp</td><td>Program Change.<br>
This message sent when the patch number changes.<br>
(ppppppp) is the new program number.</td></tr>
<tr><td>1101nnnn</td><td>0vvvvvvv</td><td>Channel Pressure (After-touch).<b=
r>
This message is most often sent by pressing down on the key after it "botto=
ms out".
This message is different from polyphonic after-touch. Use this message to =
send the single greatest
pressure value (of all the current depressed keys).<br>
(vvvvvvv) is the pressure value.</td></tr>
<tr><td>1110nnnn</td><td>0lllllll<br>0mmmmmmm</td><td>Pitch Wheel Change.<b=
r>
This message is sent to indicate a change in the pitch wheel.  The pitch wh=
eel is measured by a
fourteen bit value. Centre (no pitch change) is 2000H.  Sensitivity is a fu=
nction of the transmitter.<br>
(lllllll) are the least significant 7 bits.<br>
(mmmmmmm) are the most significant 7 bits.</td></tr>
<tr><th colspan=3D"3">Channel Mode Messages  (See also Control Change, abov=
e)</th></tr>
<tr><td>1011nnnn</td><td>0ccccccc<br>0vvvvvvv</td><td>Channel Mode Messages=
.<br>
This the same code as the Control Change (above), but implements Mode contr=
ol by using reserved
controller numbers.  The numbers are:<br>
Local Control.<br>
When Local Control is Off, all devices on a given channel will respond only=
 to data received
over MIDI.  Played data, etc. will be ignored.  Local Control On restores t=
he functions of the
normal controllers.<br>
c =3D 122, v =3D 0: Local Control Off<br>
c =3D 122, v =3D 127: Local Control On<br>
<p>All Notes Off.<br>
When an All Notes Off is received all oscillators will turn off.<br>
c =3D 123, v =3D 0: All Notes Off<br>
c =3D 124, v =3D 0: Omni Mode Off<br>
c =3D 125, v =3D 0: Omni Mode On<br>
c =3D 126, v =3D M: Mono Mode On (Poly Off) where M is the number of channe=
ls (Omni Off) or 0 (Omni On)<br>
c =3D 127, v =3D 0: Poly Mode On (Mono Off)
(Note: These four messages also cause All Notes Off)</p></td></tr>
<tr><th colspan=3D"3">System Common Messages</th></tr>
<tr><td>11110000</td><td>0iiiiiii<br>0ddddddd<br>..<br>..<br>0ddddddd<br>11=
110111</td><td>System Exclusive.<br>
This message makes up for all that MIDI doesn't support. (iiiiiii) is usual=
ly a seven-bit Manufacturer's I.D. code.
If the synthesiser recognises the I.D. code as its own, it will listen to t=
he rest of
the message (ddddddd).  Otherwise, the message will be ignored.  System Exc=
lusive
is used to send bulk dumps such as patch parameters and other non-spec data=
.
(Note: Real-Time messages ONLY may be interleaved with a System Exclusive.)
This message also is used for extensions called Universal Exclusive Message=
s.</td></tr>
<tr><td>11110001</td><td>&nbsp;</td><td>Undefined.</td></tr>
<tr><td>11110010</td><td>0lllllll<br>0mmmmmmm</td><td>Song Position Pointer=
.<br>
This is an internal 14 bit register that holds the number of MIDI beats (1 =
beat=3D
six MIDI clocks) since the start of the song.  l is the LSB, m the MSB.</td=
></tr>
<tr><td>11110011</td><td>0sssssss</td><td>Song Select.<br>
The Song Select specifies which sequence or song is to be played.</td></tr>
<tr><td>11110100</td><td>&nbsp;</td><td>Undefined.</td></tr>
<tr><td>11110101</td><td>&nbsp;</td><td>Undefined.</td></tr>
<tr><td>11110110</td><td>&nbsp;</td><td>Tune Request.<br>
Upon receiving a Tune Request, all analog synthesisers should tune their os=
cillators.</td></tr>
<tr><td>11110111</td><td>&nbsp;</td><td>End of Exclusive.<br>
Used to terminate a System Exclusive dump (see above).</td></tr>
<tr><th colspan=3D"3">System Real-Time Messages</th></tr>
<tr><td>11111000</td><td>&nbsp;</td><td>Timing Clock.<br>
Sent 24 times per quarter note when synchronisation is required.</td></tr>
<tr><td>11111001</td><td>&nbsp;</td><td>Undefined.</td></tr>
<tr><td>11111010</td><td>&nbsp;</td><td>Start.<br>
Start the current sequence playing. (This message will be followed with Tim=
ing Clocks).</td></tr>
<tr><td>11111011</td><td>&nbsp;</td><td>Continue.<br>
Continue at the point the sequence was Stopped.</td></tr>
<tr><td>11111100</td><td>&nbsp;</td><td>Stop.<br>
Stop the current sequence.</td></tr>
<tr><td>11111101</td><td>&nbsp;</td><td>Undefined.<br></td></tr>
<tr><td>11111110</td><td>&nbsp;</td><td>Active Sensing.<br>
Use of this message is optional. When initially sent, the receiver will exp=
ect
to receive another Active Sensing message each 300ms (max), or it will be a=
ssume
that the connection has been terminated. At termination, the receiver will =
turn off
all voices and return to normal (non-active sensing) operation.</td></tr>
<tr><td>11111111</td><td>&nbsp;</td><td>Reset.<br>
Reset all receivers in the system to power-up status. This should be used
sparingly, preferably under manual control. In particular, it should not
be sent on power-up.<br>In a MIDI file this is used as an escape to introdu=
ce
&lt;meta events&gt;.</td></tr>
</tbody></table>
<hr>
<h3><a id=3D"BMA1_2">Appendix 1.2 - Table of MIDI Controller Messages (Data=
 Bytes)</a></h3>
<p>
The following table lists the MIDI Controller messages in numerical (binary=
) order.</p><p>
</p><table class=3D"joplin">
<tbody><tr><th colspan=3D"3">2nd Byte Value</th><th>Function</th><th colspa=
n=3D"2">3rd Byte</th></tr>
<tr><th>Binary</th><th>Hex</th><th>Dec</th><th>&nbsp;</th><th>Value</th><th=
>Use</th></tr>
<tr><td>00000000</td><td>00</td><td>0</td><td>Bank Select</td><td>0-127</td=
><td>MSB</td></tr>
<tr><td>00000001</td><td>01</td><td>1</td><td>* Modulation wheel</td><td>0-=
127</td><td>MSB</td></tr>
<tr><td>00000010</td><td>02</td><td>2</td><td>Breath control</td><td>0-127<=
/td><td>MSB</td></tr>
<tr><td>00000011</td><td>03</td><td>3</td><td>Undefined</td><td>0-127</td><=
td>MSB</td></tr>
<tr><td>00000100</td><td>04</td><td>4</td><td>Foot controller</td><td>0-127=
</td><td>MSB</td></tr>
<tr><td>00000101</td><td>05</td><td>5</td><td>Portamento time</td><td>0-127=
</td><td>MSB</td></tr>
<tr><td>00000110</td><td>06</td><td>6</td><td>Data Entry</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00000111</td><td>07</td><td>7</td><td>* Channel Volume (formerly Ma=
in Volume)</td><td>0-127</td><td>MSB</td></tr>
<tr><td>00001000</td><td>08</td><td>8</td><td>Balance</td><td>0-127</td><td=
>MSB</td></tr>
<tr><td>00001001</td><td>09</td><td>9</td><td>Undefined</td><td>0-127</td><=
td>MSB</td></tr>
<tr><td>00001010</td><td>0A</td><td>10</td><td>* Pan</td><td>0-127</td><td>=
MSB</td></tr>
<tr><td>00001011</td><td>0B</td><td>11</td><td>* Expression Controller</td>=
<td>0-127</td><td>MSB</td></tr>
<tr><td>00001100</td><td>0C</td><td>12</td><td>Effect control 1</td><td>0-1=
27</td><td>MSB</td></tr>
<tr><td>00001101</td><td>0D</td><td>13</td><td>Effect control 2</td><td>0-1=
27</td><td>MSB</td></tr>
<tr><td>00001110</td><td>0E</td><td>14</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00001111</td><td>0F</td><td>15</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00010000</td><td>10</td><td>16</td><td>General Purpose Controller #=
1</td><td>0-127</td><td>MSB</td></tr>
<tr><td>00010001</td><td>11</td><td>17</td><td>General Purpose Controller #=
2</td><td>0-127</td><td>MSB</td></tr>
<tr><td>00010010</td><td>12</td><td>18</td><td>General Purpose Controller #=
3</td><td>0-127</td><td>MSB</td></tr>
<tr><td>00010011</td><td>13</td><td>19</td><td>General Purpose Controller #=
4</td><td>0-127</td><td>MSB</td></tr>
<tr><td>00010100</td><td>14</td><td>20</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00010101</td><td>15</td><td>21</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00010110</td><td>16</td><td>22</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00010111</td><td>17</td><td>23</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011000</td><td>18</td><td>24</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011001</td><td>19</td><td>25</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011010</td><td>1A</td><td>26</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011011</td><td>1B</td><td>27</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011100</td><td>1C</td><td>28</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011101</td><td>1D</td><td>29</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011110</td><td>1E</td><td>30</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00011111</td><td>1F</td><td>31</td><td>Undefined</td><td>0-127</td>=
<td>MSB</td></tr>
<tr><td>00100000</td><td>20</td><td>32</td><td>Bank Select</td><td>0-127</t=
d><td>LSB</td></tr>
<tr><td>00100001</td><td>21</td><td>33</td><td>Modulation wheel</td><td>0-1=
27</td><td>LSB</td></tr>
<tr><td>00100010</td><td>22</td><td>34</td><td>Breath control</td><td>0-127=
</td><td>LSB</td></tr>
<tr><td>00100011</td><td>23</td><td>35</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00100100</td><td>24</td><td>36</td><td>Foot controller</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>00100101</td><td>25</td><td>37</td><td>Portamento time</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>00100110</td><td>26</td><td>38</td><td>Data entry</td><td>0-127</td=
><td>LSB</td></tr>
<tr><td>00100111</td><td>27</td><td>39</td><td>Channel Volume (formerly Mai=
n Volume)</td><td>0-127</td><td>LSB</td></tr>
<tr><td>00101000</td><td>28</td><td>40</td><td>Balance</td><td>0-127</td><t=
d>LSB</td></tr>
<tr><td>00101001</td><td>29</td><td>41</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00101010</td><td>2A</td><td>42</td><td>Pan</td><td>0-127</td><td>LS=
B</td></tr>
<tr><td>00101011</td><td>2B</td><td>43</td><td>Expression Controller</td><t=
d>0-127</td><td>LSB</td></tr>
<tr><td>00101100</td><td>2C</td><td>44</td><td>Effect control 1</td><td>0-1=
27</td><td>LSB</td></tr>
<tr><td>00101101</td><td>2D</td><td>45</td><td>Effect control 2</td><td>0-1=
27</td><td>LSB</td></tr>
<tr><td>00101110</td><td>2E</td><td>46</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00101111</td><td>2F</td><td>47</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00110000</td><td>30</td><td>48</td><td>General Purpose Controller #=
1</td><td>0-127</td><td>LSB</td></tr>
<tr><td>00110001</td><td>31</td><td>49</td><td>General Purpose Controller #=
2</td><td>0-127</td><td>LSB</td></tr>
<tr><td>00110010</td><td>32</td><td>50</td><td>General Purpose Controller #=
3</td><td>0-127</td><td>LSB</td></tr>
<tr><td>00110011</td><td>33</td><td>51</td><td>General Purpose Controller #=
4</td><td>0-127</td><td>LSB</td></tr>=20
<tr><td>00110100</td><td>34</td><td>52</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00110101</td><td>35</td><td>53</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00110110</td><td>36</td><td>54</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00110111</td><td>37</td><td>55</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111000</td><td>38</td><td>56</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111001</td><td>39</td><td>57</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111010</td><td>3A</td><td>58</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>=20
<tr><td>00111011</td><td>3B</td><td>59</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111100</td><td>3C</td><td>60</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111101</td><td>3D</td><td>61</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111110</td><td>3E</td><td>62</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>00111111</td><td>3F</td><td>63</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01000000</td><td>40</td><td>64</td><td>* Damper pedal on/off (Susta=
in)</td><td>&lt;63=3Doff</td><td>&gt;64=3Don</td></tr>
<tr><td>01000001</td><td>41</td><td>65</td><td>Portamento on/off</td><td>&l=
t;63=3Doff</td><td>&gt;64=3Don</td></tr>
<tr><td>01000010</td><td>42</td><td>66</td><td>Sustenuto on/off</td><td>&lt=
;63=3Doff</td><td>&gt;64=3Don</td></tr>
<tr><td>01000011</td><td>43</td><td>67</td><td>Soft pedal on/off</td><td>&l=
t;63=3Doff</td><td>&gt;64=3Don</td></tr>
<tr><td>01000100</td><td>44</td><td>68</td><td>Legato Footswitch</td><td>&l=
t;63=3Doff</td><td>&gt;64=3Don</td></tr>
<tr><td>01000101</td><td>45</td><td>69</td><td>Hold 2</td><td>&lt;63=3Doff<=
/td><td>&gt;64=3Don</td></tr>
<tr><td>01000110</td><td>46</td><td>70</td><td>Sound Controller 1 (Sound Va=
riation)</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01000111</td><td>47</td><td>71</td><td>Sound Controller 2 (Timbre)<=
/td><td>0-127</td><td>LSB</td></tr>
<tr><td>01001000</td><td>48</td><td>72</td><td>Sound Controller 3 (Release =
Time)</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01001001</td><td>49</td><td>73</td><td>Sound Controller 4 (Attack T=
ime)</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01001010</td><td>4A</td><td>74</td><td>Sound Controller 5 (Brightne=
ss)</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01001011</td><td>4B</td><td>75</td><td>Sound Controller 6</td><td>0=
-127</td><td>LSB</td></tr>
<tr><td>01001100</td><td>4C</td><td>76</td><td>Sound Controller 7</td><td>0=
-127</td><td>LSB</td></tr>
<tr><td>01001101</td><td>4D</td><td>77</td><td>Sound Controller 8</td><td>0=
-127</td><td>LSB</td></tr>
<tr><td>01001110</td><td>4E</td><td>78</td><td>Sound Controller 9</td><td>0=
-127</td><td>LSB</td></tr>
<tr><td>01001111</td><td>4F</td><td>79</td><td>Sound Controller 10</td><td>=
0-127</td><td>LSB</td></tr>
<tr><td>01010000</td><td>50</td><td>80</td><td>General Purpose Controller #=
5</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01010001</td><td>51</td><td>81</td><td>General Purpose Controller #=
6</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01010010</td><td>52</td><td>82</td><td>General Purpose Controller #=
7</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01010011</td><td>53</td><td>83</td><td>General Purpose Controller #=
8</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01010100</td><td>54</td><td>84</td><td>Portamento Control</td><td>0=
-127</td><td>Source Note</td></tr>
<tr><td>01010101</td><td>55</td><td>85</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01010110</td><td>56</td><td>86</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01010111</td><td>57</td><td>87</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01011000</td><td>58</td><td>88</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01011001</td><td>59</td><td>89</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01011010</td><td>5A</td><td>90</td><td>Undefined</td><td>0-127</td>=
<td>LSB</td></tr>
<tr><td>01011011</td><td>5B</td><td>91</td><td>Effects 1 Depth</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>01011100</td><td>5C</td><td>92</td><td>Effects 2 Depth</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>01011101</td><td>5D</td><td>93</td><td>Effects 3 Depth</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>01011110</td><td>5E</td><td>94</td><td>Effects 4 Depth</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td>01011111</td><td>5F</td><td>95</td><td>Effects 5 Depth</td><td>0-12=
7</td><td>LSB</td></tr>
<tr><td colspan=3D"6">&nbsp;</td></tr>
<tr><td>01100000</td><td>60</td><td>96</td><td>Data entry +1</td><td>N/A</t=
d><td>&nbsp;</td></tr>
<tr><td>01100001</td><td>61</td><td>97</td><td>Data entry -1</td><td>N/A</t=
d><td>&nbsp;</td></tr>
<tr><td>01100010</td><td>62</td><td>98</td><td>Non-Registered Parameter Num=
ber LSB</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01100011</td><td>63</td><td>99</td><td>Non-Registered Parameter Num=
ber MSB</td><td>0-127</td><td>MSB</td></tr>
<tr><td>01100100</td><td>64</td><td>100</td><td>* Registered Parameter Numb=
er LSB</td><td>0-127</td><td>LSB</td></tr>
<tr><td>01100101</td><td>65</td><td>101</td><td>* Registered Parameter Numb=
er MSB</td><td>0-127</td><td>MSB</td></tr>
<tr><td>01100110</td><td>66</td><td>102</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01100111</td><td>67</td><td>103</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101000</td><td>68</td><td>104</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101001</td><td>69</td><td>105</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101010</td><td>6A</td><td>106</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101011</td><td>6B</td><td>107</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101100</td><td>6C</td><td>108</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101101</td><td>6D</td><td>109</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101110</td><td>6E</td><td>110</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01101111</td><td>6F</td><td>111</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110000</td><td>70</td><td>112</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110001</td><td>71</td><td>113</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110010</td><td>72</td><td>114</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110011</td><td>73</td><td>115</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110100</td><td>74</td><td>116</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110101</td><td>75</td><td>117</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110110</td><td>76</td><td>118</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td>01110111</td><td>77</td><td>119</td><td>Undefined</td><td>?</td><td=
>&nbsp;</td></tr>
<tr><td colspan=3D"6">&nbsp;</td></tr>
<tr><td>01111000</td><td>78</td><td>120</td><td>All Sound Off</td><td>0</td=
><td>&nbsp;</td></tr>
<tr><td>01111001</td><td>79</td><td>121</td><td>* Reset All Controllers</td=
><td>0</td><td>&nbsp;</td></tr>
<tr><td>01111010</td><td>7A</td><td>122</td><td>Local control on/off</td><t=
d>0=3Doff</td><td>127=3Don</td></tr>  =20
<tr><td>01111011</td><td>7B</td><td>123</td><td>* All notes off</td><td>0</=
td><td>&nbsp;</td></tr>
<tr><td>01111100</td><td>7C</td><td>124</td><td>Omni mode off (+ all notes =
off)</td><td>0</td><td>&nbsp;</td></tr>
<tr><td>01111101</td><td>7D</td><td>125</td><td>Omni mode on (+ all notes o=
ff)</td><td>0</td><td>&nbsp;</td></tr>
<tr><td>01111110</td><td>7E</td><td>126</td><td>Poly mode on/off (+ all not=
es off)</td><td>**</td><td>&nbsp;</td></tr>
<tr><td>01111111</td><td>7F</td><td>127</td><td>Poly mode on (incl mono=3Do=
ff +all notes off)</td><td>0</td><td>&nbsp;</td></tr>
</tbody></table>
* Equipment must respond in order to comply with General MIDI level 1.<br>
** This equals the number of channels, or zero if the number of channels
equals the number of voices in the receiver.
<hr>
<h3><a id=3D"BMA1_3">Appendix 1.3 - Table of MIDI Note Numbers</a></h3>
<p>
This table (Amended August 2012) lists all MIDI Note Numbers (middle C is n=
ote 60) by octave.
</p><p>
<i>The absolute octave number designations are based on Middle C =3D C5,
which is an arbitrary assignment (as used by Cakewalk).</i>
</p><p>
</p><table class=3D"joplin">
<tbody><tr><th>Octave #</th><th colspan=3D"12">Note Numbers</th></tr>
<tr><th>&nbsp;</th><th>C</th><th>C#</th><th>D</th><th>D#</th><th>E</th><th>=
F</th>
<th>F#</th><th>G</th><th>G#</th><th>A</th><th>A#</th><th>B</th></tr>
<tr><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><=
td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td></tr>
<tr><td>1</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td><td>17=
</td><td>18</td><td>19</td><td>20</td><td>21</td><td>22</td><td>23</td></tr=
>
<tr><td>2</td><td>24</td><td>25</td><td>26</td><td>27</td><td>28</td><td>29=
</td><td>30</td><td>31</td><td>32</td><td>33</td><td>34</td><td>35</td></tr=
>
<tr><td>3</td><td>36</td><td>37</td><td>38</td><td>39</td><td>40</td><td>41=
</td><td>42</td><td>43</td><td>44</td><td>45</td><td>46</td><td>47</td></tr=
>
<tr><td>4</td><td>48</td><td>49</td><td>50</td><td>51</td><td>52</td><td>53=
</td><td>54</td><td>55</td><td>56</td><td>57</td><td>58</td><td>59</td></tr=
>
<tr><td>5</td><td>60</td><td>61</td><td>62</td><td>63</td><td>64</td><td>65=
</td><td>66</td><td>67</td><td>68</td><td>69</td><td>70</td><td>71</td></tr=
>
<tr><td>6</td><td>72</td><td>73</td><td>74</td><td>75</td><td>76</td><td>77=
</td><td>78</td><td>79</td><td>80</td><td>81</td><td>82</td><td>83</td></tr=
>
<tr><td>7</td><td>84</td><td>85</td><td>86</td><td>87</td><td>88</td><td>89=
</td><td>90</td><td>91</td><td>92</td><td>93</td><td>94</td><td>95</td></tr=
>
<tr><td>8</td><td>96</td><td>97</td><td>98</td><td>99</td><td>100</td><td>1=
01</td><td>102</td><td>103</td><td>104</td><td>105</td><td>106</td><td>107<=
/td></tr>
<tr><td>9</td><td>108</td><td>109</td><td>110</td><td>111</td><td>112</td><=
td>113</td><td>114</td><td>115</td><td>116</td><td>117</td><td>118</td><td>=
119</td></tr>
<tr><td>10</td><td>120</td><td>121</td><td>122</td><td>123</td><td>124</td>=
<td>125</td><td>126</td><td>127</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp=
;</td><td>&nbsp;</td></tr>
</tbody></table>
<hr>
<h3><a id=3D"BMA1_4">Appendix 1.4 - General MIDI Instrument Patch Map</a></=
h3>
<p>
</p><ul>
<li>The names of the instruments indicate what sort of sound will
be heard when that instrument number (MIDI Program Change or "PC#")
is selected on the GM synthesizer.
</li><li>These sounds are the same for all MIDI Channels except Channel
10, which has only percussion sounds and some sound "effects".
(See <a href=3D"https://midimusic.github.io/tech/midispec.html#BMA1_5">Appe=
ndix 1.5</a> - General MIDI Percussion Key Map)
</li></ul>
<h3>GM Instrument Families </h3>
<p>
The General MIDI instrument sounds are grouped by families. In
each family are 8 specific instruments.
</p><p>
</p><table class=3D"joplin">
<tbody><tr><th>PC#</th><th>Family</th><th>PC#</th><th>Family</th></tr>
<tr><td>1-8</td><td>Piano</td><td>65-72</td><td>Reed</td></tr>
<tr><td>9-16</td><td>Chromatic Percussion</td><td>73-80</td><td>Pipe</td></=
tr>
<tr><td>17-24</td><td>Organ</td><td>81-88</td><td>Synth Lead</td></tr>
<tr><td>25-32</td><td>Guitar</td><td>89-96</td><td>Synth Pad</td></tr>
<tr><td>33-40</td><td>Bass</td><td>97-104</td><td>Synth Effects</td></tr>
<tr><td>41-48</td><td>Strings</td><td>105-112</td><td>Ethnic</td></tr>
<tr><td>49-56</td><td>Ensemble</td><td>113-120</td><td>Percussive</td></tr>
<tr><td>57-64</td><td>Brass</td><td>121-128</td><td>Sound Effects</td></tr>
</tbody></table>
<h3>GM Instrument Patch Map</h3>
<p>
<b>Note:</b> While GM does not define the actual characteristics
of any sounds, the names in parentheses after each of the synth
leads, pads, and sound effects are, in particular, intended only
as guides.
</p><p>
</p><table class=3D"joplin">
<tbody><tr><th>PC#</th><th>Instrument</th><th>PC#</th><th>Instrument</th></=
tr>
<tr><td>1.</td><td>Acoustic Grand Piano</td><td>65.</td><td>Soprano Sax</td=
></tr>
<tr><td>2.</td><td>Bright Acoustic Piano</td><td>66.</td><td>Alto Sax</td><=
/tr>
<tr><td>3.</td><td>Electric Grand Piano</td><td>67.</td><td>Tenor Sax</td><=
/tr>
<tr><td>4.</td><td>Honky-tonk Piano</td><td>68.</td><td>Baritone Sax</td></=
tr>
<tr><td>5.</td><td>Electric Piano 1 (Rhodes Piano)</td><td>69.</td><td>Oboe=
</td></tr>
<tr><td>6.</td><td>Electric Piano 2 (Chorused Piano)</td><td>70.</td><td>En=
glish Horn</td></tr>
<tr><td>7.</td><td>Harpsichord</td><td>71.</td><td>Bassoon</td></tr>
<tr><td>8.</td><td>Clavinet</td><td>72.</td><td>Clarinet</td></tr>
<tr><td>9.</td><td>Celesta</td><td>73.</td><td>Piccolo</td></tr>
<tr><td>10.</td><td>Glockenspiel</td><td>74.</td><td>Flute</td></tr>
<tr><td>11.</td><td>Music Box</td><td>75.</td><td>Recorder</td></tr>
<tr><td>12.</td><td>Vibraphone</td><td>76.</td><td>Pan Flute</td></tr>
<tr><td>13.</td><td>Marimba</td><td>77.</td><td>Blown Bottle</td></tr>
<tr><td>14.</td><td>Xylophone</td><td>78.</td><td>Shakuhachi</td></tr>
<tr><td>15.</td><td>Tubular Bells</td><td>79.</td><td>Whistle</td></tr>
<tr><td>16.</td><td>Dulcimer (Santur)</td><td>80.</td><td>Ocarina</td></tr>
<tr><td>17.</td><td>Drawbar Organ (Hammond)</td><td>81.</td><td>Lead 1 (squ=
are wave)</td></tr>
<tr><td>18.</td><td>Percussive Organ</td><td>82.</td><td>Lead 2 (sawtooth w=
ave)</td></tr>
<tr><td>19.</td><td>Rock Organ</td><td>83.</td><td>Lead 3 (calliope)</td></=
tr>
<tr><td>20.</td><td>Church Organ</td><td>84.</td><td>Lead 4 (chiffer)</td><=
/tr>
<tr><td>21.</td><td>Reed Organ</td><td>85.</td><td>Lead 5 (charang)</td></t=
r>
<tr><td>22.</td><td>Accordion (French)</td><td>86.</td><td>Lead 6 (voice so=
lo)</td></tr>
<tr><td>23.</td><td>Harmonica</td><td>87.</td><td>Lead 7 (fifths)</td></tr>
<tr><td>24.</td><td>Tango Accordion (Band neon)</td><td>88.</td><td>Lead 8 =
(bass + lead)</td></tr>
<tr><td>25.</td><td>Acoustic Guitar (nylon)</td><td>89.</td><td>Pad 1 (new =
age Fantasia)</td></tr>
<tr><td>26.</td><td>Acoustic Guitar (steel)</td><td>90.</td><td>Pad 2 (warm=
)</td></tr>
<tr><td>27.</td><td>Electric Guitar (jazz)</td><td>91.</td><td>Pad 3 (polys=
ynth)</td></tr>
<tr><td>28.</td><td>Electric Guitar (clean)</td><td>92.</td><td>Pad 4 (choi=
r space voice)</td></tr>
<tr><td>29.</td><td>Electric Guitar (muted)</td><td>93.</td><td>Pad 5 (bowe=
d glass)</td></tr>
<tr><td>30.</td><td>Overdriven Guitar</td><td>94.</td><td>Pad 6 (metallic p=
ro)</td></tr>
<tr><td>31.</td><td>Distortion Guitar</td><td>95.</td><td>Pad 7 (halo)</td>=
</tr>
<tr><td>32.</td><td>Guitar harmonics</td><td>96.</td><td>Pad 8 (sweep)</td>=
</tr>
<tr><td>33.</td><td>Acoustic Bass</td><td>97.</td><td>FX 1 (rain)</td></tr>
<tr><td>34.</td><td>Electric Bass (fingered)</td><td>98.</td><td>FX 2 (soun=
dtrack)</td></tr>
<tr><td>35.</td><td>Electric Bass (picked)</td><td>99.</td><td>FX 3 (crysta=
l)</td></tr>
<tr><td>36.</td><td>Fretless Bass</td><td>100.</td><td>FX 4 (atmosphere)</t=
d></tr>
<tr><td>37.</td><td>Slap Bass 1</td><td>101.</td><td>FX 5 (brightness)</td>=
</tr>
<tr><td>38.</td><td>Slap Bass 2</td><td>102.</td><td>FX 6 (goblins)</td></t=
r>
<tr><td>39.</td><td>Synth Bass 1</td><td>103.</td><td>FX 7 (echoes, drops)<=
/td></tr>
<tr><td>40.</td><td>Synth Bass 2</td><td>104.</td><td>FX 8 (sci-fi, star th=
eme)</td></tr>
<tr><td>41.</td><td>Violin</td><td>105.</td><td>Sitar</td></tr>
<tr><td>42.</td><td>Viola</td><td>106.</td><td>Banjo</td></tr>
<tr><td>43.</td><td>Cello</td><td>107.</td><td>Shamisen</td></tr>
<tr><td>44.</td><td>Contrabass</td><td>108.</td><td>Koto</td></tr>
<tr><td>45.</td><td>Tremolo Strings</td><td>109.</td><td>Kalimba</td></tr>
<tr><td>46.</td><td>Pizzicato Strings</td><td>110.</td><td>Bag pipe</td></t=
r>
<tr><td>47.</td><td>Orchestral Harp</td><td>111.</td><td>Fiddle</td></tr>
<tr><td>48.</td><td>Timpani</td><td>112.</td><td>Shanai</td></tr>
<tr><td>49.</td><td>String Ensemble 1 (strings)</td><td>113.</td><td>Tinkle=
 Bell</td></tr>
<tr><td>50.</td><td>String Ensemble 2 (slow strings)</td><td>114.</td><td>A=
gogo</td></tr>
<tr><td>51.</td><td>SynthStrings 1</td><td>115.</td><td>Steel Drums</td></t=
r>
<tr><td>52.</td><td>SynthStrings 2</td><td>116.</td><td>Woodblock</td></tr>
<tr><td>53.</td><td>Choir Aahs</td><td>117.</td><td>Taiko Drum</td></tr>
<tr><td>54.</td><td>Voice Oohs</td><td>118.</td><td>Melodic Tom</td></tr>
<tr><td>55.</td><td>Synth Voice</td><td>119.</td><td>Synth Drum</td></tr>
<tr><td>56.</td><td>Orchestra Hit</td><td>120.</td><td>Reverse Cymbal</td><=
/tr>
<tr><td>57.</td><td>Trumpet</td><td>121.</td><td>Guitar Fret Noise</td></tr=
>
<tr><td>58.</td><td>Trombone</td><td>122.</td><td>Breath Noise</td></tr>
<tr><td>59.</td><td>Tuba</td><td>123.</td><td>Seashore</td></tr>
<tr><td>60.</td><td>Muted Trumpet</td><td>124.</td><td>Bird Tweet</td></tr>
<tr><td>61.</td><td>French Horn</td><td>125.</td><td>Telephone Ring</td></t=
r>
<tr><td>62.</td><td>Brass Section</td><td>126.</td><td>Helicopter</td></tr>
<tr><td>63.</td><td>SynthBrass 1</td><td>127.</td><td>Applause</td></tr>
<tr><td>64.</td><td>SynthBrass 2</td><td>128.</td><td>Gunshot</td></tr>
</tbody></table>
<hr>
<h3><a id=3D"BMA1_5">Appendix 1.5 - General MIDI Percussion Key Map</a></h3=
>
<p>
On MIDI Channel 10, each MIDI Note number ("Key#") corresponds
to a different drum sound, as shown below.
GM-compatible instruments must have the sounds on the keys
shown here. While many current instruments also have additional
sounds above or below the range show here, and may even have
additional "kits" with variations of these sounds, only these
sounds are supported by General MIDI.
</p><p>
</p><table class=3D"joplin">
<tbody><tr><th>Key#</th><th>Note</th><th>Drum Sound</th><th>Key#</th><th>No=
te</th><th>Drum Sound</th></tr>
<tr><td>35</td><td>B1</td><td>Acoustic Bass Drum</td><td>59</td><td>B3</td>=
<td>Ride Cymbal 2</td></tr>
<tr><td>36</td><td>C2</td><td>Bass Drum 1</td><td>60</td><td>C4</td><td>Hi =
Bongo</td></tr>
<tr><td>37</td><td>C#2</td><td>Side Stick</td><td>61</td><td>C#4</td><td>Lo=
w Bongo</td></tr>
<tr><td>38</td><td>D2</td><td>Acoustic Snare</td><td>62</td><td>D4</td><td>=
Mute Hi Conga</td></tr>
<tr><td>39</td><td>D#2</td><td>Hand Clap</td><td>63</td><td>D#4</td><td>Ope=
n Hi Conga</td></tr>
<tr><td>40</td><td>E2</td><td>Electric Snare</td><td>64</td><td>E4</td><td>=
Low Conga</td></tr>
<tr><td>41</td><td>F2</td><td>Low Floor Tom</td><td>65</td><td>F4</td><td>H=
igh Timbale</td></tr>
<tr><td>42</td><td>F#2</td><td>Closed Hi Hat</td><td>66</td><td>F#4</td><td=
>Low Timbale</td></tr>
<tr><td>43</td><td>G2</td><td>High Floor Tom</td><td>67</td><td>G4</td><td>=
High Agogo</td></tr>
<tr><td>44</td><td>G#2</td><td>Pedal Hi-Hat</td><td>68</td><td>G#4</td><td>=
Low Agogo</td></tr>
<tr><td>45</td><td>A2</td><td>Low Tom</td><td>69</td><td>A4</td><td>Cabasa<=
/td></tr>
<tr><td>46</td><td>A#2</td><td>Open Hi-Hat</td><td>70</td><td>A#4</td><td>M=
aracas</td></tr>
<tr><td>47</td><td>B2</td><td>Low-Mid Tom</td><td>71</td><td>B4</td><td>Sho=
rt Whistle</td></tr>
<tr><td>48</td><td>C3</td><td>Hi Mid Tom</td><td>72</td><td>C5</td><td>Long=
 Whistle</td></tr>
<tr><td>49</td><td>C#3</td><td>Crash Cymbal 1</td><td>73</td><td>C#5</td><t=
d>Short Guiro</td></tr>
<tr><td>50</td><td>D3</td><td>High Tom</td><td>74</td><td>D5</td><td>Long G=
uiro</td></tr>
<tr><td>51</td><td>D#3</td><td>Ride Cymbal 1</td><td>75</td><td>D#5</td><td=
>Claves</td></tr>
<tr><td>52</td><td>E3</td><td>Chinese Cymbal</td><td>76</td><td>E5</td><td>=
Hi Wood Block</td></tr>
<tr><td>53</td><td>F3</td><td>Ride Bell</td><td>77</td><td>F5</td><td>Low W=
ood Block</td></tr>
<tr><td>54</td><td>F#3</td><td>Tambourine</td><td>78</td><td>F#5</td><td>Mu=
te Cuica</td></tr>
<tr><td>55</td><td>G3</td><td>Splash Cymbal</td><td>79</td><td>G5</td><td>O=
pen Cuica</td></tr>
<tr><td>56</td><td>G#3</td><td>Cowbell</td><td>80</td><td>G#5</td><td>Mute =
Triangle</td></tr>
<tr><td>57</td><td>A3</td><td>Crash Cymbal 2</td><td>81</td><td>A5</td><td>=
Open Triangle</td></tr>
<tr><td>58</td><td>A#3</td><td>Vibraslap</td><td>&nbsp;</td><td>&nbsp;</td>=
<td>&nbsp;</td></tr>
</tbody></table>
<hr>
<h2><a id=3D"BMA2_">Appendix 2 - Program Fragments and Example MIDI Files</=
a></h2>
<p>
Here are some of the routines to read and write
variable-length numbers in MIDI Files. These routines are in C,
and use getc and putc, which read and write single 8-bit
characters from/to the files infile and outfile.
</p><p>
WriteVarLen(value)<br>
register long value;<br>
{<br>
register long buffer;<br>
</p><p>
buffer =3D value &amp; 0x7f;<br>
while((value &gt;&gt;=3D 7) &gt; 0)<br>
&nbsp;{<br>
&nbsp;buffer &lt;&lt;=3D 8;<br>
&nbsp;buffer |=3D 0x80;<br>
&nbsp;buffer +=3D (value &amp;0x7f);<br>
&nbsp;}

</p><p>while (TRUE)<br>
&nbsp;{<br>
&nbsp;putc(buffer,outfile);<br>
&nbsp;if(buffer &amp; 0x80) buffer &gt;&gt;=3D 8;<br>
&nbsp;else<br>
&nbsp;break;<br>
&nbsp;}<br>
}
</p><p>
doubleword ReadVarLen()<br>
{<br>
register doubleword value;<br>
register byte c;
</p><p>
if((value =3D getc(infile)) &amp; 0x80)<br>
&nbsp;{<br>
&nbsp;value &amp;=3D 0x7f;<br>
&nbsp;do<br>
&nbsp;&nbsp;{<br>
&nbsp;&nbsp;value =3D (value &lt;&lt; 7) + ((c =3D getc(infile))) &amp; 0x7=
f);<br>
&nbsp;&nbsp;} while (c &amp; 0x80);<br>
&nbsp;}<br>
return(value);<br>
}
</p><p>As an example, MIDI Files for the following excerpt are shown
below. First, a format 0 file is shown, with all information
intermingled; then, a format 1 file is shown with all data
separated into four tracks: one for tempo and time signature, and
three for the notes. A resolution of 96 "ticks" per
quarter note is used. A time signature of 4/4 and a tempo of 120,
though implied, are explicitly stated.<br>
<img src=3D"https://midimusic.github.io/tech/test.gif" width=3D"237" height=
=3D"196" alt=3D"test.gif"><br>
The contents of the MIDI stream represented by this example
are broken down here:
</p><table class=3D"joplin">
<tbody><tr><th>Delta-Time<br> (decimal)</th><th>Event-Code<br> (hex)</th><t=
h>Other Bytes<br> (decimal)</th><th>Comment</th></tr>
<tr><td>0 </td><td>FF 58 </td><td>04 04 02 24 08 </td><td>4 bytes; 4/4 time=
; 24 MIDI clocks/click, 8 32nd notes/ 24 MIDI clocks (24 MIDI clocks =3D 1 =
crotchet =3D 1 beat)</td></tr>
<tr><td>0 </td><td>FF 51 </td><td>03 500000 </td><td>3 bytes: 500,000 usec/=
 quarter note =3D 120 beats/minute</td></tr>
<tr><td>0 </td><td>C0 </td><td>5 </td><td>Ch.1 Program Change 5 =3D GM Patc=
h 6 =3D Electric Piano 2</td></tr>
<tr><td>0 </td><td>C1 </td><td>46 </td><td>Ch.2 Program Change 46 =3D GM Pa=
tch 47 =3D Harp</td></tr>
<tr><td>0 </td><td>C2 </td><td>70 </td><td>Ch.3 Program Change 70 =3D GM Pa=
tch 71 =3D Bassoon</td></tr>
<tr><td>0 </td><td>92 </td><td>48 96 </td><td>Ch.3 Note On C3, forte</td></=
tr>
<tr><td>0 </td><td>92 </td><td>60 96 </td><td>Ch.3 Note On C4, forte</td></=
tr>
<tr><td>96 </td><td>91 </td><td>67 64 </td><td>Ch.2 Note On G4, mezzo-forte=
</td></tr>
<tr><td>96 </td><td>90 </td><td>76 32 </td><td>Ch.1 Note On E5, piano</td><=
/tr>
<tr><td>192 </td><td>82 </td><td>48 64 </td><td>Ch.3 Note Off C3, standard<=
/td></tr>
<tr><td>0 </td><td>82 </td><td>60 64 </td><td>Ch.3 Note Off C4, standard</t=
d></tr>
<tr><td>0 </td><td>81 </td><td>67 64 </td><td>Ch.2 Note Off G4, standard</t=
d></tr>
<tr><td>0 </td><td>80 </td><td>76 64 </td><td>Ch.1 Note Off E5, standard</t=
d></tr>
<tr><td>0 </td><td>FF 2F </td><td>00 </td><td>Track End</td></tr>
</tbody></table>
The entire format 0 MIDI file contents in hex follow. First, the header chu=
nk:
<table class=3D"joplin">
<tbody><tr><td>4D 54 68 64 </td><td>MThd</td></tr>
<tr><td>00 00 00 06 </td><td>chunk length</td></tr>
<tr><td>00 00 </td><td>format 0</td></tr>
<tr><td>00 01 </td><td>one track</td></tr>
<tr><td>00 60 </td><td>96 per quarter-note</td></tr>
</tbody></table>
Then the track chunk. Its header followed by the events (notice the running=
 status is used in places):
<table class=3D"joplin">
<tbody><tr><td>4D 54 72 6B </td><td>MTrk</td></tr>
<tr><td> 00 00 00 3B </td><td>chunk length (59)</td></tr>
</tbody></table>
<table class=3D"joplin">
<tbody><tr><th>Delta-Time </th><th>Event </th><th>Comments</th></tr>
<tr><td>00 </td><td>FF 58 04 04 02 18 08 </td><td>time signature</td></tr>
<tr><td>00 </td><td>FF 51 03 07 A1 20 </td><td>tempo</td></tr>
<tr><td>00 </td><td>C0 05 </td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>C1 2E</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>C2 46</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>92 30 60</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>3C 60 </td><td>running status</td></tr>
<tr><td>60 </td><td>91 43 40</td><td>&nbsp;</td></tr>
<tr><td>60 </td><td>90 4C 20</td><td>&nbsp;</td></tr>
<tr><td>81 40 </td><td>82 30 40 </td><td>two-byte delta-time</td></tr>
<tr><td>00 </td><td>3C 40 </td><td>running status</td></tr>
<tr><td>00 </td><td>81 43 40</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>80 4C 40</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>FF 2F 00 </td><td>end of track</td></tr>
</tbody></table>
A format 1 representation of the file is slightly different.
Its header chunk:
<table class=3D"joplin">
<tbody><tr><td>4D 54 68 64 </td><td>MThd</td></tr>
<tr><td>00 00 00 06 </td><td>chunk length</td></tr>
<tr><td>00 01 </td><td>format 1</td></tr>
<tr><td>00 04 </td><td>four tracks</td></tr>
<tr><td>00 60 </td><td>96 per quarter note</td></tr>
</tbody></table>
First, the track chunk for the time signature/tempo track. Its
header, followed by the events:
<table class=3D"joplin">
<tbody><tr><td>4D 54 72 6B </td><td>MTrk</td></tr>
<tr><td>00 00 00 14 </td><td>chunk length (20)</td></tr>
</tbody></table>
<table class=3D"joplin">
<tbody><tr><th>Delta-Time </th><th>Event </th><th>Comments</th></tr>
<tr><td>00 </td><td>FF 58 04 04 02 18 08 </td><td>time signature</td></tr>
<tr><td>00 </td><td>FF 51 03 07 A1 20 </td><td>tempo</td></tr>
<tr><td>83 00 </td><td>FF 2F 00 </td><td>end of track</td></tr>
</tbody></table>
Then, the track chunk for the first music track. The MIDI
convention for note on/off running status is used in this
example:
<table class=3D"joplin">
<tbody><tr><td>4D 54 72 6B </td><td>MTrk</td></tr>
<tr><td>00 00 00 10 </td><td>chunk length (16)</td></tr>
</tbody></table>
<table class=3D"joplin">
<tbody><tr><th>Delta-Time </th><th>Event </th><th>Comments</th></tr>
<tr><td>00 </td><td>C0 05</td><td>&nbsp;</td></tr>
<tr><td>81 40 </td><td>90 4C 20</td><td>&nbsp;</td></tr>
<tr><td>81 40 </td><td>4C 00 </td><td>Running status: note on, vel=3D0</td>=
</tr>
<tr><td>00 FF 2F 00</td><td>&nbsp;</td><td>&nbsp;</td></tr>
</tbody></table>
Then, the track chunk for the second music track:
<table class=3D"joplin">
<tbody><tr><td>4D 54 72 6B </td><td>MTrk</td></tr>
<tr><td>00 00 00 0F </td><td>chunk length (15)</td></tr>
</tbody></table>
<table class=3D"joplin">
<tbody><tr><th>Delta-Time </th><th>Event </th><th>Comments</th></tr>
<tr><td>00 </td><td>C1 2E</td><td>&nbsp;</td></tr>
<tr><td>60 </td><td>91 43 40</td><td>&nbsp;</td></tr>
<tr><td>82 20 </td><td>43 00 </td><td>running status</td></tr>
<tr><td>00 </td><td>FF 2F 00 </td><td>end of track</td></tr>
</tbody></table>
Then, the track chunk for the third music track:
<table class=3D"joplin">
<tbody><tr><td>4D 54 72 6B </td><td>MTrk</td></tr>
<tr><td>00 00 00 15 </td><td>chunk length (21)</td></tr>
</tbody></table>
<table class=3D"joplin">
<tbody><tr><th>Delta-Time </th><th>Event </th><th>Comments</th></tr>
<tr><td>00 </td><td>C2 46</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>92 30 60</td><td>&nbsp;</td></tr>
<tr><td>00 </td><td>3C 60 </td><td>running status</td></tr>
<tr><td>83 00 </td><td>30 00 </td><td>two-byte delta-time, running status</=
td></tr>
<tr><td>00 </td><td>3C 00 </td><td>running status</td></tr>
<tr><td> 00 </td><td>FF 2F 00 </td><td>end of track</td></tr>
</tbody></table>
<p></p>
</article>
<footer>
<p>
Webmaster: David Back<br>
<a href=3D"https://midimusic.github.io/index.html">Index</a>&nbsp;&nbsp;
<a href=3D"https://midimusic.github.io/joplin/index.html">Joplin</a>&nbsp;&=
nbsp;
<a href=3D"https://midimusic.github.io/wurlitzer/index.html">Wurlitzer</a>&=
nbsp;&nbsp;
<a href=3D"https://midimusic.github.io/tech/index.html">Technical</a>&nbsp;=
&nbsp;
<a href=3D"https://midimusic.github.io/literature/index.html">Literature</a=
>&nbsp;&nbsp;
<a href=3D"https://midimusic.github.io/estey/index.html">Estey Music</a>&nb=
sp;&nbsp;
<a href=3D"https://midimusic.github.io/about/index.html">About MidiMusic</a=
>
</p>
</footer>


</body></html>
------MultipartBoundary--nyPOM5N2JdnvC1PrLcdAOLzSMdKQi7m1X3Kes8yApH----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://midimusic.github.io/style.css

@charset "utf-8";

header, nav, footer, article, section, aside { display: block; }

body { color: black; background: moccasin; font-family: Verdana, Arial, san=
s-serif; max-width: 960px; }

h1, h2 { text-align: center; color: mediumblue; text-shadow: white 2px 2px =
2px; }

h3, h4 { color: mediumblue; }

h5 { text-align: center; color: mediumblue; }

h3 span { display: inline; font-size: 0.8em; }

blockquote { text-align: center; }

p.reditalic { color: red; font-weight: bold; font-style: italic; }

p.largerblue { color: blue; font-size: 1.2em; }

p.small { font-size: 0.7em; }

pre { overflow: hidden; }

figure { margin: 10px; padding: 0px; }

header { width: 100%; height: 60px; overflow: hidden; border-radius: 30px; =
background: silver; }

header span { display: inline; font-size: 0.7em; }

header { }

header { background: -webkit-gradient(linear, 0% 0%, 0% 100%, from(rgb(135,=
 206, 235)), to(rgb(144, 238, 144))); }

header { }

header { }

header { background: linear-gradient(rgb(135, 206, 235), rgb(144, 238, 144)=
); }

nav { padding-top: 4px; padding-left: 3%; }

nav ul { list-style: none; margin: 0px; padding: 0px; }

nav ul li { overflow: hidden; font-weight: bold; background-color: white; m=
argin-left: 0.2%; width: 13%; height: 3em; text-align: center; border: medi=
um solid silver; float: left; }

nav ul li > a { display: block; text-decoration: none; padding-top: 3px; he=
ight: 30px; }

nav ul li:hover a { color: black; }

nav ul li:hover { background-color: lightblue; }

.crumb { margin: 0px 0px 0px 50px; padding: 0px; list-style: none; }

.crumb li { display: inline; font-weight: bold; padding: 5px 5px 0px 0px; }

.crumb li a { color: cornflowerblue; padding-right: 3px; }

.crumb li::after { content: " > "; }

.crumb li:last-child::after { content: ""; }

article { float: left; width: 100%; }

ol.links { list-style-image: url("redarrow.gif"); }

ol.comments { list-style: upper-roman; }

aside { float: right; width: 40%; background-color: silver; padding-right: =
1em; padding-left: 1em; margin-left: 1em; border-radius: 30px; }

aside div { text-align: center; }

table#browser { border-collapse: collapse; background-color: peachpuff; }

table#browser th, td { border: thin solid; padding: 4px; }

table.joplin { border-collapse: collapse; background-color: peachpuff; }

table.joplin th, td { border: thin solid; padding: 4px; }

table.joplin tr { vertical-align: top; }

body.svideo { background: peachpuff; }

h2.svideo { padding-top: 90px; padding-left: 100px; padding-right: 100px; }

h2.saudio { padding-top: 30px; padding-left: 100px; padding-right: 100px; }

img.amark, img.damark, img.vmark, img.dvmark { visibility: hidden; width: 1=
3px; height: 11px; }

ul.control { list-style: none; float: left; }

button { font-weight: bold; width: 90px; background: white; border: medium =
solid mediumblue; margin: 5px; }

img#david { float: left; margin: 5px; width: 237px; height: 193px; }

img#olsen { float: left; margin: 5px; width: 97px; height: 92px; }

img#vcss { width: 88px; height: 31px; }

img#contact { width: 199px; height: 15px; }

#w125 { float: left; margin: 5px; }

#rolls { text-align: center; margin: 10px; }

#container { float: left; width: 100%; }

img#jpic { float: left; margin: 5px; width: 155px; height: 201px; }

#cleft, #cmiddle, #cright { float: left; width: 25%; padding-left: 8%; heig=
ht: 150px; }

img#marshall { width: 75px; height: 89px; }

img#hayden { width: 75px; height: 88px; }

img#chauvin { width: 75px; height: 91px; }

img#rollpic { float: left; margin: 5px; width: 150px; height: 150px; }

img#cmaple { width: 145px; height: 142px; }

img#umaple { width: 167px; height: 145px; }

img#mrswan { width: 167px; height: 145px; }

#idx { float: left; width: 40%; }

#midx { width: 100%; height: 500px; }

#book { float: left; width: 60%; }

#mbook { width: 100%; height: 500px; }

#aesm { color: red; }

img.organ { display: block; margin-left: auto; margin-right: auto; }

img.rollscan { display: block; width: 350px; height: 268px; }

video { border: 1px solid black; }

canvas { padding: 0px; margin: auto; display: block; }

footer { clear: both; background-color: moccasin; border-top: 1px solid bla=
ck; border-bottom: 1px solid black; }

footer p { text-align: center; font-weight: bold; color: black; }
------MultipartBoundary--nyPOM5N2JdnvC1PrLcdAOLzSMdKQi7m1X3Kes8yApH----
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: https://midimusic.github.io/tech/test.gif

R0lGODlh7QDEAPcAAAAAAAAAQAAAgAAA/wAgAAAgQAAggAAg/wBAAABAQABAgABA/wBgAABgQABg
gABg/wCAAACAQACAgACA/wCgAACgQACggACg/wDAAADAQADAgADA/wD/AAD/QAD/gAD//yAAACAA
QCAAgCAA/yAgACAgQCAggCAg/yBAACBAQCBAgCBA/yBgACBgQCBggCBg/yCAACCAQCCAgCCA/yCg
ACCgQCCggCCg/yDAACDAQCDAgCDA/yD/ACD/QCD/gCD//0AAAEAAQEAAgEAA/0AgAEAgQEAggEAg
/0BAAEBAQEBAgEBA/0BgAEBgQEBggEBg/0CAAECAQECAgECA/0CgAECgQECggECg/0DAAEDAQEDA
gEDA/0D/AED/QED/gED//2AAAGAAQGAAgGAA/2AgAGAgQGAggGAg/2BAAGBAQGBAgGBA/2BgAGBg
QGBggGBg/2CAAGCAQGCAgGCA/2CgAGCgQGCggGCg/2DAAGDAQGDAgGDA/2D/AGD/QGD/gGD//4AA
AIAAQIAAgIAA/4AgAIAgQIAggIAg/4BAAIBAQIBAgIBA/4BgAIBgQIBggIBg/4CAAICAQICAgICA
/4CgAICgQICggICg/4DAAIDAQIDAgIDA/4D/AID/QID/gID//6AAAKAAQKAAgKAA/6AgAKAgQKAg
gKAg/6BAAKBAQKBAgKBA/6BgAKBgQKBggKBg/6CAAKCAQKCAgKCA/6CgAKCgQKCggKCg/6DAAKDA
QKDAgKDA/6D/AKD/QKD/gKD//8AAAMAAQMAAgMAA/8AgAMAgQMAggMAg/8BAAMBAQMBAgMBA/8Bg
AMBgQMBggMBg/8CAAMCAQMCAgMCA/8CgAMCgQMCggMCg/8DAAMDAQMDAgMDA/8D/AMD/QMD/gMD/
//8AAP8AQP8AgP8A//8gAP8gQP8ggP8g//9AAP9AQP9AgP9A//9gAP9gQP9ggP9g//+AAP+AQP+A
gP+A//+gAP+gQP+ggP+g///AAP/AQP/AgP/A////AP//QP//gP///ywAAAAA7QDEAAAI/wD/CRxI
sKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTqlzJsqXLlzBjypxJs6bN
mzhz6tzJs6fPn0CDCh1KtKjRo0iTKl3KtKnTp1CjSp1KtarVq1izat3KtavXpwAAQAxLNqxAsxnR
LixL9qxYj2W/Yoz7UC1Buw3xus37dq/euW//yo0oGOHfwob7TrSL+CLaxoMZQr6reKBaum7Nxt3c
F7NlxZo7t83MeHTCyZFPV17L9vPef48Di40t+zXe0rBr57atuzDqr4gPm35dkPbo27p3Kz/INjZl
58qhG/zt1XPx1QqFE3dNmbj06dgvz//uTZ459tSfh18fGz45d+7it68Hz7t+9NXUq1vvXre9fefS
QYecef+Vt9x76IHnHn8ONZecZ5iF9t5+2pFmYG7C7Zfacecl6OFion0oomMhjmiiRPGdqGKDJa5o
ooMwxijjjDTWaOONOOao44486rjSdx6qN1SHKY1HGJFNSWgUkidpqNpVQArFpElCZjflUkouGVOV
T8JmlZNBXWlRj2SWaeaZaKap5oxFataffFGJ2ZOccD3WX2tU0bmTnhuZlt+BkoGJE585EQoYaHQK
eh2XhTJlKImIkoTnT4/aVClfa2aq6aacdopjSaU1F6SjP0Ya2pR/EnUpTauiWCJtrEH/SapKKaaY
GFatypQrexMuyN+uOgH7krAKemrsscgmuyOVD/pqX56z0iqgsxgqqhSxLWHLF3yMMjiVtj+6pF63
6YHrIoowwXhuUeZWq+y78MZ7bLrtrotrvfYmOWC+504KKL8vQogvwEj5myrBWgmMsIt+HrxwwqI+
zLC1Elds8cUYZ6zxxhx37PHHIIcs8sgkl2xyyBRv5/DJ9MJ5K4IsAxXlyy7HLPOVuJFWrrs2bymm
uvdl9mzPHwXX3r4qc8gt0SA5mV/OuwVILdNjavhnztMuTTVH/sK8rdZS17w1iL5GHCiDeIpH7tjs
TY3SymwTKPbbA59sq7iG1k3w3arG/03f3D7p/aG8hBdu+JmlAh74iYIb9m+sljKu69resiq5z3LC
LVLjMmPOq5eRvyjp4aSXbjrQTbrJouJ3UXk5S8fdmfJZoL4ubYtvfr657XRH2vbPmkvGe+q+h0T5
XMPXefryzBcOKqJmdxS88KJL292pX48lKe2DJ14gkk8fX9F4nO/pfdBzhw8uXeWbb713U9u5uvFG
Vr958/jnjyyz8Nc8c+LTkwrnlIa+YolvJAfsSvlqRbkAjqx945rM7KjWPgsl0G9rGZ3+NshBNbUM
gwKsIAg1EsERHsVgIjRh1YbjQBW2iYUpdCHZiidDKamthuyKHg5teMEd+vCHQAyiEP+HSMQiGvGI
SEyiEpdIKfE5iIn0Y92BWgjFv53Na1XkGs6KJ7BQQe+L5Yphvpxotqyhz4xoFOMYK2MdqFULTnpJ
49BwiBqoZamLrzLQ/1RYxy9GKY56DCQd3eYt7J1RkIecIx/JaKOdOVJnj9wjE7OUxcmpsZKYzKQm
+9XBTnqSR8R7YhYH6EXg+bBxQopQh6iIsvMtilqsbOXtAAm+wJxSg5/MpS5j9Lw2Gk2KYyNlBIkk
yhoukJbpuyTDLLXHCTLtkj2kIy53SU1q4m19sVyXGBP4G0qaLIbcNOXjHug53W0rm/0a1tVsySJl
bqVd1YynNXtJEUliEJWPKqYM3Wktzn0uKZox4+copynPgm5wkwhNqEIXytCGOvShEI2oRCdK0Ypa
9KIYzahGTRgQADs=

------MultipartBoundary--nyPOM5N2JdnvC1PrLcdAOLzSMdKQi7m1X3Kes8yApH------
